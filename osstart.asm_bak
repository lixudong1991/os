prload: xor ax,ax
		mov es,ax
		mov ss,ax
		mov sp,7c00h
		xor dx,dx
		mov ax, osstartend -  osstart
		mov bx,512
		div bx
		cmp dx,0
		je r
		inc ax
r:		mov bx,0600h	
		mov ch,0
		mov cl,2
		mov dl,80h
		mov dh,0
		mov ah,2
		int 13h
		mov ax,0
		push ax
		mov ax,0600h
		push ax
		retf
		times 510-($-$$) db 0
		db 55h,0aah
osstart:mov ax,0
		mov ds,ax
		mov ss,ax
		mov sp,07c00h
	
		call clr
		mov cl,111b
		mov dl,34	
		mov dh,10
		mov si,0600h+ dataa -  osstart
		call showstr
		mov dh,11
		mov si,0600h+ datab -  osstart
		call showstr
		mov dh,12
		mov si,0600h+ datac -  osstart
		call showstr
		mov dh,13
		mov si,0600h+ datad -  osstart
		call showstr
		call clear_buff
		mov bh,0
		mov dh,10
		mov dl,34
set:	mov ah,2
		int 10h
		mov ah,0
		int 16h
		cmp ah,48h
		je set0
		cmp ah,50h
		je set1	
		cmp ah,1ch
		je set2
		jmp short set
set0:	cmp dh,10
		jna set
		dec dh	
		jmp short set
set1:	cmp dh,13
		jnb set
		inc dh
		jmp short set	
set2:	call clr
		sub dh,10
		mov bl,dh
		mov bh,0
		add bx,bx
		add bx,bx
		mov si,0600h+ table -  osstart
		jmp far [si+bx]	
		
rst:	mov ax,0ffffh
		push ax
		mov ax,0
		push ax
		retf
		
showtms:call setesc	
		call printMemInfo
		mov si,0600h+ tmstr -  osstart
showtm1:call readtms
		mov dh,0
		mov dl,31
		mov bx,0600h+ timecolor -  osstart
		mov cl,[bx]
		call showstr
		jmp short showtm1
edittm: mov dh,3
		mov dl,20
		mov cl,111b
		mov si,0600h+ writetmmsg -  osstart
		call showstr
		mov dh,4
		mov si,0600h+ writetmmsg1 -  osstart
		call showstr
		mov dh,5
		mov si,0600h+ writetmmsg2 -  osstart
		call showstr
		mov dh,6
		mov si,0600h+ writetmmsg3 -  osstart
		call showstr
		mov si,0600h+ tmstr -  osstart
		call readtms
		mov dh,12
		mov dl,31
		mov bx,0600h+ timecolor -  osstart
		mov cl,[bx]
		call showstr
		
		mov bh,0
		mov ah,2
		int 10h
		
edittm1:mov ah,0
		int 16h
		cmp ah,4bh
		je mright
		cmp ah,4dh
		je mleft
		cmp ah,1
		je edittm3
		cmp ah,1ch
		je edittm2
		cmp al,30h
		jb edittm1
		cmp al,39h
		ja edittm1
		sub bx,bx
		mov bl,dl
		sub bl,31
		cmp byte [si+bx],30h
		jb edittm1
		cmp byte [si+bx],39h
		ja edittm1	
		mov [si+bx],al
		mov bl,dl
		mov dl,31
		call showstr
		mov dl,bl
		jmp edittm1
mright:	cmp dl,31
		jna edittm1
		dec dl
		mov ah,2
		int 10h
		jmp edittm1
mleft:	cmp dl,47
		jnb edittm1
		inc dl
		mov ah,2
		int 10h
		jmp edittm1
edittm2:call writetm
		jmp edittm1
edittm3:mov ax,0
		push ax
		mov ax,0600h
		push ax
		retf
readtms:push ax
		push bx
		push cx
		push si
		push es
		xor ax,ax
		mov es,ax	
		mov bx,0600h+ tmindex -  osstart
		mov cx,6
tms:	mov al,[es:bx]
		out 70h,al
		in al,71h
		mov ah,al
		push cx
		mov cl,4
		shr al,cl
		add al,30h
		mov [si],al
		and ah,1111b
		add ah,30h
		inc si
		mov [si],ah
		add si,2
		inc bx
		pop cx
		loop tms
		pop es
		pop si
		pop cx
		pop bx
		pop ax
		ret
writetm:push ax
		push bx
		push cx
		push si
		push es
		xor ax,ax
		mov es,ax	
		mov bx,0600h+ tmindex -  osstart
		mov cx,6
wtms1:	mov al,[es:bx]
		out 70h,al
		mov al,[si]
		sub al,30h
		push cx
		mov cl,4
		shl al,cl
		inc si
		mov ah,[si]
		sub ah,30h
		or al,ah
		out 71h,al
		add si,2
		inc bx
		pop cx
		loop wtms1
		pop es
		pop si
		pop cx
		pop bx
		pop ax
		ret
			
setesc:	push ax
		push ds
		push si
		xor ax,ax
		mov ds,ax
		mov si,0600h+ int9a -  osstart
		mov ax,[36]
		mov [si],ax
		mov ax,[38]
		mov [si+2],ax
		cli 
		mov word  [36],0600h+ doesc -  osstart
		mov word  [38],0
		sti
		pop si
		pop ds
		pop ax
		ret
		
doesc:	push ax
		push ds
		push si
		push bp
		mov bp,sp
		xor ax,ax
		mov ds,ax
		mov si,0600h+ int9a -  osstart
		in al,60h
		pushf
		call far [si]
		cmp al,1
		je esc1
		cmp al,3bh
		jne i9r
		mov si,0600h+ timecolor -  osstart
		inc byte [si]
		jmp short i9r
esc1:	mov ax, [si]
		mov [36],ax
		mov ax,[si+2]
		mov [38],ax
		mov word [bp+8],00600h
		mov word [bp+0ah],0
i9r:	pop bp
		pop si
		pop ds
		pop ax
		iret	
		
clr:	push es
		push cx
		push si
		mov cx,0b800h
		mov es,cx
		mov cx,2000
		xor si,si
clrs:	mov word [es:si],720h;清空屏幕内容，并设置黑底白字
		add si,2
		loop clrs
		pop si
		pop cx
		pop es
		ret	
		
clear_buff:
		push ax
clear_buff_begin:
		mov ah,1
		int 16h		;用16h中断例程的1号子程序检查键盘缓冲区是否有数据（ZF是否等于0），且没有等待输入。
		jz clear_buff_ret	;当键盘缓冲区有数据时调用16h中断例程的0号子程序逐个清除缓冲区的数据，缓冲区为空时返回。
		mov ah,0
		int 16h
		jmp clear_buff_begin
clear_buff_ret:
		pop ax
		ret		
showstr:push ax
		push es
		mov ax,0b800h
		mov es,ax
		push si
		push bp
		mov ax,160
		mul dh
		mov bp,ax
		mov ax,2
		mul dl
		add bp,ax
		mov ah,cl
		push cx	
		xor cx,cx
str0:	mov al,[si]
		mov cl,al
		jcxz str1
		mov [es:bp],ax
		inc si
		add bp,2
		jmp short str0
str1:	pop cx
		pop bp
		pop si
		pop es
		pop ax
		ret	
		

getMemInfo:
		push eax
		push ebx
		push ecx
		push edx
		push si
		push bp
		mov si,di
		xor bp,bp
		xor ebx,ebx
getMemInfo0:
		mov eax,0xe820
		mov ecx,20
		mov edx,0x534d4150
		int 15h
		jb err
		cmp eax,0x534d4150
		jne err
		cmp ecx,20
		jne err
		inc bp
		cmp ebx,0
		je getMemInfo1
		add di,20
		jmp getMemInfo0
err:
		mov di,si
		xor bp,bp
getMemInfo1:
		mov [0600h+memInfoDataSize-osstart],bp
		pop bp
		pop si
		pop edx
		pop ecx
		pop ebx
		pop eax
		ret
			
divdw:	push bx
		push ax
		mov  ax,dx
		sub dx,dx
		div cx
		mov bx,ax
		pop ax
		div cx
		mov cx,dx
		mov dx,bx
		pop bx
		ret 
itohstr:push bx
		push cx
		push di
		mov bx,si
		mov cx,8
itohstr0:		
		mov byte [bx],'0'
		inc bx
		loop itohstr0
		mov byte [bx],0
dtoc0:	mov cx,0x10
		call divdw
		movzx di,cl
		mov cl,[di+0600h+hexstrnum-osstart]
		dec bx			
		mov [bx],cl
		mov cx,ax
		jcxz dtoc1
		jmp short dtoc0
dtoc1:	mov cx,dx
		jcxz dtoc2
		jmp short dtoc0
dtoc2:	
		pop di
		pop cx
		pop bx
		ret
	
printMemInfo:
		push ax
		push bx
		push dx
		push es
		push ds
		push di
		call clr
		mov ax,0
		mov es,ax
		mov ds,ax
		mov di,0600h+memInfoData-osstart
		call getMemInfo
		cmp di,0600h+memInfoData-osstart
		je printMemInfoerr
		mov bx,0600h+memInfoData-osstart
			
		mov dl,10	
		mov dh,1
		mov cl,111b		
		mov si,0600h+hexstrbuff-osstart		
printMemInfo0:
		
		push dx
		mov ax,[bx+4]
		mov dx,[bx+6]
		call itohstr
		pop dx
		call showstr
		push dx
		mov ax,[bx]
		mov dx,[bx+2]
		call itohstr
		pop dx
		add dl,9
		call  showstr
		
		push dx
		mov ax,[bx+12]
		mov dx,[bx+14]
		call itohstr
		pop dx
		add dl,12
		call showstr
		push dx
		mov ax,[bx+8]
		mov dx,[bx+10]
		call itohstr
		pop dx
		add dl,9
		call showstr
		
		add dl,12
		mov si,0600h+ meminfostr -  osstart
		mov ax,0600h+ meminfostr1 -  osstart	
		cmp dword [bx+16],1 
		cmovnz si,ax
		call showstr
		mov si,0600h+ hexstrbuff -  osstart
		sub dl,42
		add dh,1
		cmp bx,di
		je printMemInforet
		add bx,20
		jmp printMemInfo0
printMemInfoerr:
		mov cl,111b
		mov dl,34	
		mov dh,10
		mov si,0600h+ meminfoerrstr -  osstart
		call showstr
printMemInforet:
		pop di
		pop ds
		pop es
		pop dx
		pop bx
		pop ax
		ret
setDescriptor:
		push bp
		mov bp,sp
		push ax
		push dx
		and word [si+2],0	
		and byte [si+4],0
		and byte [si+7],0
		
		mov ax,[bp+8]
		mov dx,[bp+10]
		or  [si+2],ax
		or  [si+4],dl
		or  [si+7],dh
		 
		and word [si],0
		and byte [si+6],11110000b
		
		mov ax,[bp+4]
		mov dx,[bp+6]
		sub ax,1
		sbb dl,0
		and dl,0xf
		or [si],ax
		or [si+6],dl
		
		and byte [si+5],11110000b
		and dh,0xf
		or [si+5],dh
		
		pop dx
		pop ax
		pop bp
		ret 8	
	
;-------------------------------------------------------------------------------
read_hard_disk_0:                        ;从硬盘读取一个逻辑扇区
       push ax                                  ;输入：DI:SI=起始逻辑扇区号
	   push ds									; ES:BX=目标缓冲区地址
	   push si
	   push dx
	   mov ax,0
	   mov ds,ax
	   mov [0600h+bufferoff-osstart],bx
	   mov ax,es
	   mov [0600h+bufferseg-osstart],ax
	   mov [0600h+blockNum-osstart],si
	   mov [0600h+blockNum-osstart+2],di
	   mov ah,42h
	   mov dl,80h
	   mov si,0600h+packet-osstart
	   int 13h
	   pop dx
	   pop si
	   pop ds
	   pop ax
	   ret		
        ;设置堆栈段和栈指针 
stdos:  ;mov ax,0x1000
		;mov es,ax 
			
         ;以下读取程序的起始部分 
       ; xor di,di
       ; mov si,16            ;程序在硬盘上的起始逻辑扇区号 
      ;  xor bx,bx                       ;加载到DS:0x0000处 
      ;  call read_hard_disk_0
		 
		mov di,0600h+memInfoData-osstart
		call getMemInfo
	 	 
		 
		         ;计算GDT所在的逻辑段地址 
        mov ax,[0600h+gdt_base- osstart]        ;低16位 
        mov dx,[0600h+gdt_base- osstart+0x02]   ;高16位 
        mov bx,16        
        div bx            
        mov ds,ax                          ;令DS指向该段以进行操作
        mov bx,dx 
		 				
         ;创建0#描述符，它是空描述符，这是处理器的要求
        mov dword [bx+0x00],0x00
        mov dword [bx+0x04],0x00  	 
		
				;创建1#描述符，这是一个代码段，对应0~4GB的线性地址空间
        mov dword [ebx+0x08],0x0000ffff    ;基地址为0，段界限为0xfffff
        mov dword [ebx+0x0c],0x00CF9A00    ;粒度为4KB，存储器段描述符 
		
		;创建1#描述符，这是一个数据段，对应0~4GB的线性地址空间
        mov dword [ebx+0x10],0x0000ffff    ;基地址为0，段界限为0xfffff
        mov dword [ebx+0x14],0x00cf9200    ;粒度为4KB，存储器段描述符 
		 		
         ;建立保护模式下的堆栈段描述符      ;基地址为0x00007C00，界限0xFFFFE 
        mov dword [ebx+0x18],0x00005C00    ;粒度为4KB 
        mov dword [ebx+0x1c],0x00409600	
			
		         ;建立保护模式下的显示缓冲区描述符   
        mov dword [ebx+0x20],0x80007fff    ;基地址为0x000B8000，界限0x07FFF 
        mov dword [ebx+0x24],0x0040920b    ;粒度为字节
		 
		mov ax,0
		mov ds,ax
		         ;初始化描述符表寄存器GDTR
        mov word [0600h+gdt_size-  osstart],39  ;描述符表的界限（总字节数减一）   
                                             
        lgdt [0600h+gdt_size-  osstart]
		
		in al,0x92                         ;南桥芯片内的端口 
        or al,0000_0010B
        out 0x92,al                        ;打开A20
		 
		cli                                ;保护模式下中断机制尚未建立，应 
                                           ;禁止中断 
        mov eax,cr0
        or eax,1
        mov cr0,eax                        ;设置PE位
						;以下进入保护模式... ...
		jmp dword 0x0008:0x600+start32-osstart
		
elf_header equ 0x34   ;常数，elf文件头	
[bits 32]		
start32:

		mov eax,0000000000010_000B         ;加载数据段选择子(0x10)
        mov es,eax
		
 		;以下进入保护模式... ...
		mov eax,0000000000010_000B         ;加载数据段选择子(0x10)
        mov ds,eax
		
;		xor dx,dx
;		mov ax,[0600h+count-osstart]
;		mov cx,128
;;		mul cx
	;	movzx ecx,ax
;		mov esi,0x10000
;		mov edi,[0600h+phy_base-osstart]
;		cld
;		rep movsd
		
		
		 ;以下用简单的示例来帮助阐述32位保护模式下的堆栈操作 
        mov eax,0000000000011_000B         ;加载堆栈段选择子
        mov ss,eax
		mov esp,7c00h
		
		
		mov ebx,[0600h+phy_base-osstart]
		mov eax,16                      ;起始地址 
        mov cl,33
		call read_hard_disk_1              ;以下读取程序的起始部分（一个扇区）
		
		mov ebx,[0600h+phy_base-osstart]
		mov ebx,[ebx+24]
		
		push dword 0600h+phy_base-osstart
		push dword 0600h+phy_base-osstart
		
		push cs
		push ebx
		retf
		
read_hard_disk_1:                           ;从硬盘读取一个逻辑扇区
                                            ;EAX=逻辑扇区号
											;cl 读取的扇区数
                                            ;DS:EBX=目标缓冲区地址
         push edi                                  ;返回：EBX=EBX+512
         push eax 
         push ecx
         push edx
      
         push eax
    
		 mov ax,256
		 mov ch,0
		 mul cx
		 movzx edi,ax
		 
         mov dx,0x1f2
         mov al,cl
         out dx,al                          ;读取的扇区数

         inc dx                             ;0x1f3
         pop eax
         out dx,al                          ;LBA地址7~0

         inc dx                             ;0x1f4
         mov cl,8
         shr eax,cl
         out dx,al                          ;LBA地址15~8

         inc dx                             ;0x1f5
         shr eax,cl
         out dx,al                          ;LBA地址23~16

         inc dx                             ;0x1f6
         shr eax,cl
         or al,0xe0                         ;第一硬盘  LBA地址27~24
         out dx,al

         inc dx                             ;0x1f7
         mov al,0x20                        ;读命令
         out dx,al

  .waits:
         in al,dx
         and al,0x88
         cmp al,0x08
         jnz .waits                         ;不忙，且硬盘已准备好数据传输 

         mov ecx,edi                        ;总共要读取的字数
         mov dx,0x1f0
  .readw:
         in ax,dx
         mov [ebx],ax
         add ebx,2
         loop .readw
         pop edx
         pop ecx
         pop eax
		 pop edi
         ret  		
packet     		 db	10h             ;packet大小，16个字节
reserved	 	 db 0
count		 	 dw	14		;读1个扇区
bufferoff        dw	7e00h          ;读到内存7e00处，偏移地址
bufferseg	 	 dw	0		;段地址
blockNum	 	 dd	0               ;起始LBA块
				 dd 0					 
dataa	db '1) reset pc',0
datab	db '2) start system',0
datac	db '3) clock',0
datad	db '4) set clock',0
tmstr	db 'yy/MM/dd hh:mm:ss',0
writetmmsg	db "'<-' Move cursor to the left",0
writetmmsg1	db "'->' Move cursor to the right",0
writetmmsg2	db "'1-9' Modify the number at the cursor",0
writetmmsg3	db "'enter' Write data to cmos",0
timecolor db 111b
tmindex	db 9,8,7,4,2,0
int9a	dw 0,0
table	dw 0600h+ rst -  osstart,0,0600h+ stdos -  osstart,0,0600h+ showtms -  osstart,0,0600h+ edittm -  osstart,0
phy_base dd 0            
phy_cs	 dd 0x8
gdt_size dw 0
gdt_base dd 0x00007e00     ;GDT的物理地址 
memInfoDataSize dw 0
memInfoData times 600 db 0;每20个字节代表一段内存信息,20个字节如下
							;Offset in Bytes		Name		Description
							;		0	    BaseAddrLow		Low 32 Bits of Base Address
							;		4	    BaseAddrHigh	High 32 Bits of Base Address
							;		8	    LengthLow		Low 32 Bits of Length in Bytes
							;		12	    LengthHigh		High 32 Bits of Length in Bytes
							;		16	    Type		Address type of  this range.
hexstrbuff times 16 db 0
hexstrnum  db '0123456789ABCDEF'
meminfoerrstr db 'getMemInfo err',0
meminfostr db 'AddressRangeMemory',0
meminfostr1 db 'AddressRangeReserved',0

;Elf32_Ehdr 
;e_ident times 16 db 0
;e_type  dw 0
;e_machine dw 0;		/* Architecture */
;e_version dd 0;		/* Object file version */
;e_entry dd 0;		/* Entry point virtual address */
;e_phoff dd 0;		/* Program header table file offset */
;e_shoff dd 0;		/* Section header table file offset */
;e_flags dd 0;		/* Processor-specific flags */
;e_ehsize dw 0;		/* ELF header size in bytes */
;e_phentsize dw 0;		/* Program header table entry size */
;e_phnum dw 0;		/* Program header table entry count */
;e_shentsize dw 0;		/* Section header table entry size */
;e_shnum dw 0;		/* Section header table entry count */
;e_shstrndx dw 0;		/* Section header string table index */
;
;Elf32_Phdr
;p_type dd 0;			/* Segment type */
;p_offset dd 0;		/* Segment file offset */
;p_vaddr dd 0;		/* Segment virtual address */
;p_paddr dd 0;		/* Segment physical address */
;p_filesz dd 0;		/* Segment size in file */
;p_memsz dd 0;		/* Segment size in memory */
;p_flags dd 0;		/* Segment flags */
;p_align dd 0;		/* Segment alignment */
;
;Elf32_Shdr
;sh_name dd 0;		/* Section name (string tbl index) */
;sh_type dd 0;		/* Section type */
;sh_flags dd 0;		/* Section flags */
;sh_addr dd 0;		/* Section virtual addr at execution */
;sh_offset dd 0;		/* Section file offset */
;sh_size dd 0;		/* Section size in bytes */
;sh_link dd 0;		/* Link to another section */
;sh_info dd 0;		/* Additional section information */
;sh_addralign dd 0;		/* Section alignment */
;sh_entsize dd 0;		/* Entry size if section holds table */


osstartend:times 512 db 0 